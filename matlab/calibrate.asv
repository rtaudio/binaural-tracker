function [ dist drift ] = calibrate( n_passes )

n_speakers = 2;
crossCompare = 0

if ~exist('n_passes','var')
    n_passes = 2;
end


noiseRed =0; % during calibration we dont need to noise-elimninate
fftOrder = 15;
Fs = 48000;
C = 343;
wavPattern = 'R:\\calibspk%d_pass%d.WAV';
sweep = audioread('R:\sweep.WAV');

tailLength = 18000;

display('### Reading Calibration files...');

ss = (1:2^fftOrder)+tailLength;
sweep_matched = sweep(ss);

deltaSpkAll = zeros(n_passes, n_speakers);
timestamps = zeros(n_passes, n_speakers);

for pi = 2:n_passes % TODO
   
    
    calibSpk = zeros(n_speakers, 2^(fftOrder+1));
    deltaSpk = zeros(n_speakers,1);
     spk_matched = zeros(n_speakers, 2^(fftOrder+1));
    
    for si = 1:n_speakers
        [rec, ts] = wav_read_safe(sprintf(wavPattern, si-1, pi-1));
        timestamps(pi,si) = ts;
        rec  = rec(:,1);
        
        % fix: rechter LS hat phase gedreht?!
        if si == 1
            rec = -rec;
        end
        
        if isempty(rec)
            error('Could not load data!');
            return;
        end
        
        delta = find_delay(rec, sweep, noiseRed );
        
        % cross validation with sweep only
        %sweepOnlyDelta = abs(find_delay(rec((1:2^fftOrder) + round(delta-200)), sweep(1:2^fftOrder),noiseRed)-200);
        %assert(sweepOnlyDelta < 2.0, ['sweepOnlyDelta=' num2str(sweepOnlyDelta)]);
        
        % match found signal
        spk_matched(si,1:length(ss+round(delta))) = rec(ss+round(delta));
        
        
        calibSpk(si,:) = rec;
        deltaSpk(si) = delta;
        deltaSpkAll(pi,si)= delta;
    end
    
    
    spkDelta = (deltaSpk(2) - deltaSpk(1));
    deltaMean = mean(deltaSpk);
    
    if crossCompare
        % cross-compare speakers
        spkDeltaCross1 = abs(find_delay(calibSpk(2,(1:2^fftOrder) +round(deltaMean))',calibSpk(1,(1:2^fftOrder) +round(deltaMean))', 0));
        spkDeltaCross2 = abs(find_delay(calibSpk(1,(1:2^fftOrder) +round(deltaMean))',calibSpk(2,(1:2^fftOrder) +round(deltaMean))', 0));

        % for plotting cross-comparision
        if  spkDeltaCross1 < spkDeltaCross2
            spkDeltaCross = spkDeltaCross1;
        else
            spkDeltaCross = -spkDeltaCross2;
        end
    else
        spkDeltaCross = NaN;
    end
    
    
    fprintf('Speaker 1 delay: %8.4f samples, %5.2f ms ', deltaSpk(1), deltaSpk(1)/Fs*1000);
    fprintf('|| Speaker 2 delay: %8.4f samples, %5.2f ms\n', deltaSpk(2), deltaSpk(2)/Fs*1000);
    fprintf('Speakers distance:  %5.2f cm, %8.4f samples\n\t\t\t(x says %5.2f cm, %8.4f samples )\n', spkDelta/Fs*C*100, spkDelta, spkDeltaCross/Fs*C*100, spkDeltaCross);
    
    
    if  isnan(spkDeltaCross) || abs(spkDelta - spkDeltaCross) > 2 
        display('Plotting xcross fail');
        subplot(3,1,1);
        plot([sweep_matched spk_matched(1,1:length(sweep_matched))' spk_matched(2,1:length(sweep_matched))']);
        legend('sweep','spk1','spk2');
        grid on;
        xlim([27700 29000]-11700);
        %ax = gca;
        %ax.XTick = [27500 : 10: 430000];
        ylim([-0.3 0.3]);
                ax = gca;
        ax.XTick = [27500 : 100: 30000]-11700;
        
        
        l = length(sweep_matched);
        subplot(3,1,2);
        if ~isnan(spkDeltaCross)
            %plot([zeros(l,1) calibSpk(1,round(deltaMean*1.5)+ (1:l))' calibSpk(2,round(deltaMean*1.5)+ (1:l))' cross_match(round(deltaMean*1.5)+ (1:l))']);
            sp = round(abs(spkDeltaCross)+10);
            in = (sp:(length(sweep_matched)+tailLength-sp)) + round(deltaMean)*2;
            plot([zeros(length(in),1)  calibSpk(1,in-round(spkDelta))' calibSpk(2,in)' calibSpk(1,in-round(spkDeltaCross))',  calibSpk(1,in-round(0))']);
            legend('null','spk1 (match)','spk2','spk1 (xcor)', 'spk1');
            grid on;
            xlim([27700 29000]);
            ax = gca;
            ax.XTick = [27500 : 100: 30000];
            ylim([-0.3 0.3]);
        else
            plot(0);
        end
       
        
        subplot(3,1,3);
        sp = 50;
       % y1 = []; for x=-sp:sp; y1(sp+1+x) = sum((sweep_matched( ((sp+1):(end-sp))) - spk_matched(1, x + ((sp+1):(2^fftOrder-sp)))').^2); end;
        %y2 = []; for x=-sp:sp; y2(sp+1+x) = sum((sweep_matched( ((sp+1):(end-sp))) - spk_matched(2, x + ((sp+1):(2^fftOrder-sp)))').^2); end;
        
        % compute residual energy for different offsets over first 2
        % speaker signals (where both signal overlap)
        y1 = []; y2 = [];
        oi = (1:(length(sweep)-round(deltaSpk(i))
        for x=-sp:sp;
            y1(sp+1+x) = sum((sweep() - calibSpk(1, )').^2);
            y2(sp+1+x) = sum((sweep( ((sp+1):(end-sp))) - calibSpk(2, x + ((sp+1):(2^fftOrder-sp)))').^2);
        end;
         for x=-sp:sp;  end;
        
        plot(min(y1));  hold on;
        plot(-sp:sp, y1);
        plot(-sp:sp, y2);
        legend('null', 'spk1','spk2');
        grid on;
        plot([0,0],[y1(sp+1) y2(sp+1)]);
        ax = gca;
        ax.XTick = [-sp : 1: sp];
        hold off;
        
    end
end

%deltaSpkAll = deltaSpkAll - repmat(mean(deltaSpkAll,1), [n_passes 1]);
%deltaSpkAll = deltaSpkAll - repmat(mean(deltaSpkAll,2), [1 n_speakers]);
%figure; plot(timestamps(:,1), deltaSpkAll(:,1)); hold on;  plot(timestamps(:,2), deltaSpkAll(:,2));

dist = median(deltaSpkAll);
fprintf('\nFinal offsets:\nSpk1: %7.1f samples\nSpk2: %7.1f samples\n\n', dist(1), dist(2));
 

if n_passes > 2
%timestamps - deltaSpkAll
drift =  mean(diff(mean(deltaSpkAll,2))) /  2.922;
fprintf('Drift: %6.2f usamples/sample (%3.2f cm/s)\n',drift*1000/Fs*1000, drift/Fs*C*100);

drift1 = (deltaSpkAll(end,1) - deltaSpkAll(1,1)) / (timestamps(end,1) - timestamps(1,1));
drift2 = (deltaSpkAll(end,2) - deltaSpkAll(1,2)) / (timestamps(end,2) - timestamps(1,2));
drift = mean([drift1 drift2]);
fprintf('Drift: %6.2f usamples/sample (%3.2f cm/s)\n',drift*1000*1000, drift*C*100);
else
    drift = NaN;
end



% calc drift (mic <--> spk)
%deltaSpkAll = deltaSpkAll - repmat(mean(deltaSpkAll), [n_passes 1]);
%figure;  plot(mean(deltaSpkAll,2)); grid on;
 % figure; plotregression(1:n_passes,mean(deltaSpkAll,2));% plot(mean(deltaSpkAll,2));
end

